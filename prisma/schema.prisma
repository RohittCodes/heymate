// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id            String    @id @default(cuid())
  name          String?
  username      String?   @unique
  email         String?   @unique
  emailVerified DateTime?
  image         String    @default("https://utfs.io/f/48fe58ce-0b67-4c7c-ba99-48a6a3fee822-k6oqyv.png")
  password      String?
  isBot         Boolean   @default(false)

  Account             Account?
  groups              Group[]
  members             Member[]
  friendshipsSent     Friendship[] @relation("friendshipsSent")
  friendshipsReceived Friendship[] @relation("friendshipsReceived")
  sentMessages        DirectMessage[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Account {
  id                       String  @id @default(cuid())
  userId                   String  @unique
  type                     String
  provider                 String
  providerAccountId        String
  refresh_token            String? @db.Text
  access_token             String? @db.Text
  expires_at               Int?
  token_type               String?
  scope                    String?
  id_token                 String? @db.Text
  session_state            String?
  refresh_token_expires_in Int?

  user User? @relation(fields: [userId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([provider, providerAccountId])
}

enum FriendshipStatus {
  PENDING
  ACCEPTED
  REJECTED
  BLOCKED
}

model Friendship {
  id String @id @default(cuid())

  requesterId String
  requester   User   @relation("friendshipsSent", fields: [requesterId], references: [id], onDelete: Cascade)

  requesteeId String
  requestee   User   @relation("friendshipsReceived", fields: [requesteeId], references: [id], onDelete: Cascade)

  status FriendshipStatus @default(PENDING)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  directMessages DirectMessage[]

  @@unique([requesterId, requesteeId])
  @@index([requesterId])
  @@index([requesteeId])
}

model VerificationToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model Group {
  id          String  @id @default(cuid())
  name        String
  description String?
  imageUrl    String  @db.Text
  inviteCode  String  @db.Text

  ownerId      String
  user     User      @relation(fields: [ownerId], references: [id], onDelete: Cascade)

  members  Member[]
  messages Message[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([ownerId])
}

enum MemberRole {
  OWNER
  ADMIN
  MEMBER
  BOT
}

model Member {
  id   String     @id @default(cuid())
  role MemberRole @default(MEMBER)

  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  groupId String
  group   Group  @relation(fields: [groupId], references: [id], onDelete: Cascade)

  messages       Message[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([userId])
  @@index([groupId])
}

model Message {
  id        String   @id @default(cuid())
  content   String
  imageUrl  String?  @db.Text
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  memberId String
  member   Member @relation(fields: [memberId], references: [id], onDelete: Cascade)

  groupId String
  group   Group  @relation(fields: [groupId], references: [id], onDelete: Cascade)

  deleted   Boolean   @default(false)
  deletedAt DateTime?

  @@index([memberId])
  @@index([groupId])
}

model DirectMessage {
  id        String   @id @default(cuid())
  content   String
  fileUrl   String?  @db.Text
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  senderId String
  sender   User   @relation(fields: [senderId], references: [id], onDelete: Cascade)

  friendshipId String
  friendship   Friendship @relation(fields: [friendshipId], references: [id], onDelete: Cascade)

  deleted   Boolean   @default(false)
  deletedAt DateTime?

  @@index([friendshipId])
}
